{
    "creemOpenness": {
        "@version": "0.0.1",
        "@lang": "en-US",
        "items": [
            {
                "type": "FunctionBlock",
                "name": "Keyence.BarcodeSkill.ScanBarcode",
                "definitionBase64": "",
                "codeBase64": "aW1wb3J0IGNzdgppbXBvcnQganNvbgppbXBvcnQgc29ja2V0CmltcG9ydCBzeXMKaW1wb3J0IHRpbWUKCmZyb20gYXJyYXkgaW1wb3J0IGFycmF5CgpDU1ZfUEFUSCA9ICcvaG9tZS9zaWVtZW5zL3dvcmtzcGFjZS9kYW5mb3NzX2tleWVuY2VfYmFyY29kZV9pbmRleC5jc3YnClJFQ1ZfREFUQV9MRU5HVEggPSAxMDI0CgpUSU1FX09VVF9LRVlFTkNFX0JBUkNPREUgPSA1MApSRVRSWV9DT1VOVEVSID0gNQpJUF9ERUZBVUxUID0gIjE5Mi4xNjguMS4xMDAiClBPUlRfREVGQVVMVCA9IDkwMDQKTE9OX0NPTU1BTkQgPSBhcnJheSgnYicsIFsweDRjLCAweDRmLCAweDRlLCAweDBEXSkgICAgICAgICAjIHN0YXJ0IHRvIHJlYWQKTE9GRl9DT01NQU5EID0gYXJyYXkoJ2InLCBbMHg0YywgMHg0ZiwgMHg0NiwgMHg0NiwgMHgwRF0pICAjIHN0b3AgcmVhZApCQVJDT0RFX0lOREVYX01JTiA9IDAKQkFSQ09ERV9JTkRFWF9NQVggPSAxMApDU1ZfQkFSQ09ERV9OQU1FID0gIkJhcmNvZGUiCkNTVl9QU0VUX05BTUUgPSAiUHNldCIKUFNFVF9MRU5HVEggPSAzCgpkZWYgU1BJRFJfRkJfTWFpbihJUCwgUG9ydCwgcHNldCk6CiAgICBpcF9zb2NrZXQgPSBJUAogICAgcG9ydF9zb2NrZXQgPSBpbnQoUG9ydCkKCiAgICBjbGllbnQgPSBCYXJjb2RlQ2xpZW50KGlwX3NvY2tldCwgcG9ydF9zb2NrZXQpCiAgICBiYXJjb2RlID0gY2xpZW50LnJ1bl9tb2R1bGUoKQoKICAgIHRpbWUuc2xlZXAoMikKCiAgICBqc29uX1BzZXQgPSBkYXRhX2NvbXBhcmUoYmFyY29kZSkKCiAgICBjbGllbnQuY2xvc2VfbW9kdWxlKCkKICAgIAogICAgc3RhdHVzID0gMHgwMDAwMDAwMAogICAgcmV0dXJuIChiYXJjb2RlLCBzdGF0dXMpCgoKZGVmIGRhdGFfY29tcGFyZShiYXJjb2RlKToKICAgIHByaW50KCItIGJhcmNvZGU6ICVzLCB0eXBlOiAlcyIgJSAoYmFyY29kZSwgdHlwZShiYXJjb2RlKSkpCiAgICBzdHJfcHNldCA9ICdFUlInCiAgICBpbnRfcHNldCA9IDAKICAgIGluZGV4X2ZsYWcgPSAwIAogICAgZGljdF9wc2V0ID0geyJQc2V0IjoiMDAwIn0KCiAgICAjIG9wZW4gY3N2IGZpbGUgYW5kIGNoZWNrIGJhcmNvZGUgbmFtZQogICAgY3N2X2luZGV4ID0gb3BlbihDU1ZfUEFUSCwncicpICMgLCBlbmNvZGluZz0ndXRmLTgnCiAgICByZWFkZXIgPSBjc3YuRGljdFJlYWRlcihjc3ZfaW5kZXgpCgogICAgZm9yIGkgaW4gcmVhZGVyOgogICAgICAgIGlmIGlbQ1NWX0JBUkNPREVfTkFNRV0gPT0gYmFyY29kZToKICAgICAgICAgICAgaW50X3BzZXQgPSBpbnQoaVtDU1ZfUFNFVF9OQU1FXSkKICAgICAgICAgICAgaWYgaW50X3BzZXQgPj0gQkFSQ09ERV9JTkRFWF9NQVggb3IgaW50X3BzZXQgPD0gQkFSQ09ERV9JTkRFWF9NSU46CiAgICAgICAgICAgICAgICBzdHJfcHNldCA9ICdFUlInCiAgICAgICAgICAgICAgICBwcmludCgiRVJST1I6IHVuZGVmaW5lZCBwc2V0IHZhbHVlIikKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIHN0cl9wc2V0ID0gaVtDU1ZfUFNFVF9OQU1FXS56ZmlsbChQU0VUX0xFTkdUSCkKICAgICAgICAgICAgaW5kZXhfZmxhZyArPSAxCiAgICAgICAgICAgIHByaW50KCItIHN0cl9wc2V0OiAlcywgdHlwZTogJXMiICUgKHN0cl9wc2V0LCB0eXBlKHN0cl9wc2V0KSkpCiAgICAgICAgICAgIHByaW50KCItIGluZGV4X2ZsYWc6ICVkIiAlIGluZGV4X2ZsYWcpCiAgICAgICAgICAgIGJyZWFrCgogICAgaWYgaW5kZXhfZmxhZyA8PSAwOgogICAgICAgIHByaW50KCJFUlJPUjogdW5yZWNvZGVyIGJhcmNvZGUgbmFtZSIpCgogICAgZGljdF9wc2V0WyJQc2V0Il0gPSBzdHJfcHNldAogICAganNvbl9Qc2V0ID0ganNvbi5kdW1wcyhkaWN0X3BzZXQpCiAgICBwcmludCgiLSBqc29uX1BzZXQ6ICVzLCB0eXBlOiAlcyIgJSAoanNvbl9Qc2V0LCB0eXBlKGpzb25fUHNldCkpKQogICAgY3N2X2luZGV4LmNsb3NlKCkKCiAgICByZXR1cm4gKGpzb25fUHNldCkKCicnJwpkZWYgc2luZ2xldG9uKGNscywgKmFyZ3MsICoqa3cpOgogICAgaW5zdGFuY2VzID0ge30KICAgIGRlZiBfc2luZ2xldG9uKCk6CiAgICAgICAgaWYgY2xzIG5vdCBpbiBpbnN0YW5jZXM6CiAgICAgICAgICAgIGluc3RhbmNlc1tjbHNdID0gY2xzKCphcmdzLCAqKmt3KQogICAgICAgIHJldHVybiBpbnN0YW5jZXNbY2xzXQogICAgcmV0dXJuIF9zaW5nbGV0b24oKQoKQHNpbmdsZXRvbgonJycKCmNsYXNzIEJhcmNvZGVDbGllbnQob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpcD1JUF9ERUZBVUxULCBwb3J0PVBPUlRfREVGQVVMVCk6CiAgICAgICAgY291bnRlciA9IFJFVFJZX0NPVU5URVIKICAgICAgICB3aGlsZSBjb3VudGVyID4gMDoKICAgICAgICAgICAgY291bnRlciAtPSAxCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuc2sgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3IgYXMgbXNnOgogICAgICAgICAgICAgICAgc2VsZi5zayA9IE5vbmUKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLnNrLmNvbm5lY3QoKGlwLCBwb3J0KSkKICAgICAgICAgICAgICAgIHByaW50KCItLXNvY2tldCBjb25uZWN0IikKICAgICAgICAgICAgICAgIHNlbGYuc2suc2V0dGltZW91dChUSU1FX09VVF9LRVlFTkNFX0JBUkNPREUpCiAgICAgICAgICAgIGV4Y2VwdCBzb2NrZXQuZXJyb3IgYXMgbXNnOgogICAgICAgICAgICAgICAgc2VsZi5zay5jbG9zZSgpCiAgICAgICAgICAgICAgICBzZWxmLnNrID0gTm9uZQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgYnJlYWsKCiAgICBkZWYgcmVjdihzZWxmKToKICAgICAgICBjb3VudGVyID0gUkVUUllfQ09VTlRFUgogICAgICAgIHdoaWxlIGNvdW50ZXIgPiAwOgogICAgICAgICAgICBjb3VudGVyIC09IDEKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGF0YSA9IHNlbGYuc2sucmVjdihSRUNWX0RBVEFfTEVOR1RIKQogICAgICAgICAgICAgICAgcHJpbnQoIi0gcmVjdiBkYXRhOiAlcyIgJSBkYXRhKQogICAgICAgICAgICAgICAgaWYgbGVuKGRhdGEpIDwgMSBvciBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIHByaW50KCItIGxlbihkYXRhKTogJWQiICUgbGVuKGRhdGEpKQogICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEucmVwbGFjZShiJ1xyJywgYicnKQogICAgICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yIGFzIG1zZzoKICAgICAgICAgICAgICAgIHByaW50KG1zZykKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGJyZWFrCgogICAgZGVmIHJ1bl9tb2R1bGUoc2VsZik6CiAgICAgICAgY291bnRlciA9IFJFVFJZX0NPVU5URVIKICAgICAgICB3aGlsZSBjb3VudGVyID4gMDoKICAgICAgICAgICAgY291bnRlciAtPSAxCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuc2suc2VuZGFsbChMT05fQ09NTUFORCkKICAgICAgICAgICAgICAgIHByaW50KCItLXNvY2tldCBzZW5kIExPTiBjb21tYW5kIikKICAgICAgICAgICAgICAgIGRhdGEgPSBzZWxmLnJlY3YoKQogICAgICAgICAgICAgICAgcHJpbnQoIi0gcnVuIG1vZHVsZSByZWN2IGRhdGE6ICVzIiAlIGRhdGEpCiAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmUgOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5kZWNvZGUoJ3V0Zi04JykKICAgICAgICAgICAgZXhjZXB0IHNvY2tldC5lcnJvciBhcyBtc2c6CiAgICAgICAgICAgICAgICBwcmludChtc2cpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBicmVhawogICAgCiAgICBkZWYgY2xvc2VfbW9kdWxlKHNlbGYpOgogICAgICAgIGNvdW50ZXIgPSBSRVRSWV9DT1VOVEVSCiAgICAgICAgd2hpbGUgY291bnRlciA+IDA6CiAgICAgICAgICAgIGNvdW50ZXIgLT0gMQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzZWxmLnNrLnNlbmRhbGwoTE9GRl9DT01NQU5EKQogICAgICAgICAgICAgICAgcHJpbnQoIi0tc29ja2V0IHNlbmQgTE9GRiBjb21tYW5kIikKICAgICAgICAgICAgZXhjZXB0IHNvY2tldC5lcnJvciBhcyBtc2c6CiAgICAgICAgICAgICAgICBwcmludChtc2cpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBicmVhawogICAgICAgIHNlbGYuc2suY2xvc2UoKQogICAgICAgIHByaW50KCItLXNvY2tldCBjbG9zZSIpCiAgICAgICAgc2VsZi5zayA9IE5vbmUKCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIFNQSURSX0ZCX01haW4oSVBfREVGQVVMVCwgUE9SVF9ERUZBVUxUKQo="
            },
            {
                "type": "Device",
                "name": "BarcodeScanner.Keyence.SR1000",
                "definitionBase64": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLQpDb21tb24gUnVudGltZS1FbmdpbmVlcmluZyBFeGNoYW5nZSBNb2RlbCAoQ1JFRU0pCkNvcHlyaWdodCDCqSAyMDIxIFNpZW1lbnMgQUcuIEFkdmFudGEuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCgogKiBTaWVtZW5zIEFHLiBNSVQgTGljZW5zZSAxLjAKICoKICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24KICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24KICogZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dAogKiByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwKICogY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlCiAqIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nCiAqIGNvbmRpdGlvbnM6CiAqIAogKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZQogKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsCiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUwogKiBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORAogKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVAogKiBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwKICogV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HCiAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IKICogT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgotLT4KPGNtOkNJTUkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgCiAgICAgICAgIHhtbG5zOmJzPSJodHRwOi8vY3JlZW0uc2llbWVucy5jb20vc2NoZW1hcy9iYXNlIiAKICAgICAgICAgeG1sbnM6Y2ltPSJodHRwOi8vY3JlZW0uc2llbWVucy5jb20vc2NoZW1hcy9jaW0iIAogICAgICAgICB4bWxuczpjbT0iaHR0cDovL2NyZWVtLnNpZW1lbnMuY29tL3NjaGVtYXMvY3JlZW0iCiAgICAgICAgIHhtbG5zPSJodHRwOi8vY3JlZW0uc2llbWVucy5jb20vc2NoZW1hcy9jcmVlbSIKICAgICAgICAgc3RhdGU9IkFscGhhIiB2ZXJzaW9uPSIwLjAuMSIgbGFuZz0iZW4tVVMiPgoKICAgIDxjbTpEZXZpY2VEZXNjcmlwdGlvbiBpZD0iQmFyY29kZVNjYW5uZXIuS2V5ZW5jZS5TUjEwMDAiPgogICAgICAgIDxjbTpNZXRhZGF0YT4KICAgICAgICAgICAgPGNtOk5hbWVzcGFjZT5DUkVFTS5ERC57aWR9PC9jbTpOYW1lc3BhY2U+CiAgICAgICAgICAgIDxjbTpOYW1lPktleWVuY2UuU1IxMDAwPC9jbTpOYW1lPgogICAgICAgICAgICA8Y206VmVyc2lvbj4xLjAuMDwvY206VmVyc2lvbj4KICAgICAgICAgICAgPGNtOkRlc2NyaXB0aW9uLz4KICAgICAgICAgICAgPGNtOlVVSUQvPgogICAgICAgICAgICA8Y206T3JnYW5pemF0aW9uLz4KICAgICAgICAgICAgPGNtOkNlcnRpZmljYXRpb24vPgogICAgICAgIDwvY206TWV0YWRhdGE+CgogICAgICAgIDxjbTpVSUluZm9ybWF0aW9uPgogICAgICAgICAgICA8Y206Q29udGVudCBsYW5nPSJlbi1VUyI+CiAgICAgICAgICAgICAgICA8Y206RGlzcGxheU5hbWU+U1IxMDAwPC9jbTpEaXNwbGF5TmFtZT4KICAgICAgICAgICAgICAgIDxjbTpEZXNjcmlwdGlvbj5LZXllbmNlIEJhcmNvZGUgU2Nhbm5lcjwvY206RGVzY3JpcHRpb24+CiAgICAgICAgICAgICAgICA8Y206RGV2aWNlVHlwZSBpZD0iQmFyY29kZVNjYW5uZXIiIGRpc3BsYXlOYW1lPSJCYXJjb2RlIFNjYW5uZXIiLz4KICAgICAgICAgICAgICAgIDxjbTpJY29uIHJlZj0iUmVzb3VyY2UuZGVmYXVsdEljb24iLz4KICAgICAgICAgICAgPC9jbTpDb250ZW50PgogICAgICAgICAgICA8Y206Q29udGVudCBsYW5nPSJ6aC1DTiI+CiAgICAgICAgICAgICAgICA8Y206RGlzcGxheU5hbWU+U1IxMDAwPC9jbTpEaXNwbGF5TmFtZT4KICAgICAgICAgICAgICAgIDxjbTpEZXNjcmlwdGlvbj7ln7rmganlo6vmnaHnoIHmiavmj4/lmag8L2NtOkRlc2NyaXB0aW9uPgogICAgICAgICAgICAgICAgPGNtOkRldmljZVR5cGUgaWQ9IkJhcmNvZGVTY2FubmVyIiBkaXNwbGF5TmFtZT0i5p2h56CB5omr5o+P5ZmoIi8+CiAgICAgICAgICAgIDwvY206Q29udGVudD4KICAgICAgICA8L2NtOlVJSW5mb3JtYXRpb24+CgogICAgICAgIDxjbTpEYXRhPgogICAgICAgICAgICA8Y206Q29udGVudD4KICAgICAgICAgICAgICAgIDxjbTpEZXZpY2VUeXBlIGlkPSJCYXJjb2RlU2Nhbm5lciIvPgogICAgICAgICAgICAgICAgPGNtOlBhcmVudD4KICAgICAgICAgICAgICAgICAgICA8Y206Q29tbXVuaWNhdGlvbiByZWY9IkV0aGVybmV0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGNtOlBhcmFtZXRlcnM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y206UGFyYW1ldGVyIGlkPSJpcEFkZHJlc3MiIGRlZmF1bHRWYWx1ZT0iMTkyLjE2OC4xLjEwMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3J0IG51bWJlciBzaGFsbCBiZSBpbiByYW5nZSAxMDI1fjY1NTM1LCBSRkMgMzIzMiA8PSAxMDI0IGlzIG5vdCBhbGxvd2VkIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNtOlBhcmFtZXRlciBpZD0icG9ydE51bWJlciIgZGVmYXVsdFZhbHVlPSI5MDA0Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvY206UGFyYW1ldGVycz4KICAgICAgICAgICAgICAgICAgICA8L2NtOkNvbW11bmljYXRpb24+CiAgICAgICAgICAgICAgICA8L2NtOlBhcmVudD4KICAgICAgICAgICAgICAgIDxjbTpDaGlsZHJlbi8+CiAgICAgICAgICAgIDwvY206Q29udGVudD4KICAgICAgICA8L2NtOkRhdGE+CgogICAgICAgIDxjbTpSZXNvdXJjZT4KICAgICAgICAgICAgPGNtOkNvbnRlbnQgaWQ9IlJlc291cmNlLmRlZmF1bHRJY29uIiB0eXBlPSJJY29uIiBmb3JtYXQ9IlNWRyI+PC9jbTpDb250ZW50PgogICAgICAgIDwvY206UmVzb3VyY2U+CiAgICA8L2NtOkRldmljZURlc2NyaXB0aW9uPgo8L2NtOkNJTUk+"
            }
        ]
    }
}
